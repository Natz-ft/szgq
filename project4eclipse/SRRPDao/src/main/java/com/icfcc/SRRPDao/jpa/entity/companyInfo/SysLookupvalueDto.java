    
package com.icfcc.SRRPDao.jpa.entity.companyInfo;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.util.*;

import java.lang.reflect.Array;
/**
 * <p>Title: DTO of table: SYS_LOOKUPVALUE</p>
 * <p>Description:  Data Transfer Object </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: 2016-10-27 15:30:30 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dto.vm version timestamp: 2008-01-08 16:30:00 
 *
 * @author wangxin
 */

public class SysLookupvalueDto{
/********************************************************
 *   fields
 ********************************************************/

    /**
    *  ID VARCHAR2   , NOT NULL       */
    protected String id;
    /**
    *  CODE VARCHAR2   , NOT NULL       */
    protected String code;
    /**
    *  DISPLAYVALUE VARCHAR2         */
    protected String displayvalue;
    /**
    *  LOOKUPLIST_ID VARCHAR2         */
    protected String lookuplistid;
    /**
    *  SORT NUMBER         */
    protected BigDecimal sort;
    /**
    *  CREATE_BY VARCHAR2         */
    protected String createby;
    /**
    *  CREATE_DATE DATE   , NOT NULL       */
    protected Date createdate;
    /**
    *  UPDATE_BY VARCHAR2         */
    protected String updateby;
    /**
    *  UPDATE_DATE DATE         */
    protected Date updatedate;
    /**
    *  VERSION NUMBER         */
    protected BigDecimal version;
    /**
    *  PARENT_ID VARCHAR2         */
    protected String parentid;
    /**
    *  LOOK_LEVEL NUMBER         */
    protected BigDecimal looklevel;

	/**
	 * 标记当前被修改过的列及其原始值
	 */
	protected Map changedValues = new HashMap();
	

/******************************************************
*
*  getter and setter
*
*******************************************************/

    public Map getChangedValues() {
        return changedValues;
    }

    public void setChangedValues(Map changedValues) {
        this.changedValues = changedValues;
    }


     /**
     *   Getter ID , NOT NULL        * */
    public String getId()
    {
        return id;
    }
     /**
     *   Setter ID , NOT NULL        * */
    public void setId(String _id) {
		if (!changedValues.containsKey(columnId())) {
			changedValues.put(columnId(), this.id);
		}
        this.id = _id;
    }


     /**
     *   Getter CODE , NOT NULL        * */
    public String getCode()
    {
        return code;
    }
     /**
     *   Setter CODE , NOT NULL        * */
    public void setCode(String _code) {
		if (!changedValues.containsKey(columnCode())) {
			changedValues.put(columnCode(), this.code);
		}
        this.code = _code;
    }


     /**
     *   Getter DISPLAYVALUE        * */
    public String getDisplayvalue()
    {
        return displayvalue;
    }
     /**
     *   Setter DISPLAYVALUE        * */
    public void setDisplayvalue(String _displayvalue) {
		if (!changedValues.containsKey(columnDisplayvalue())) {
			changedValues.put(columnDisplayvalue(), this.displayvalue);
		}
        this.displayvalue = _displayvalue;
    }


     /**
     *   Getter LOOKUPLIST_ID        * */
    public String getLookuplistid()
    {
        return lookuplistid;
    }
     /**
     *   Setter LOOKUPLIST_ID        * */
    public void setLookuplistid(String _lookuplistid) {
		if (!changedValues.containsKey(columnLookuplistid())) {
			changedValues.put(columnLookuplistid(), this.lookuplistid);
		}
        this.lookuplistid = _lookuplistid;
    }


     /**
     *   Getter SORT        * */
    public BigDecimal getSort()
    {
        return sort;
    }
     /**
     *   Setter SORT        * */
    public void setSort(BigDecimal _sort) {
		if (!changedValues.containsKey(columnSort())) {
			changedValues.put(columnSort(), this.sort);
		}
        this.sort = _sort;
    }


     /**
     *   Getter CREATE_BY        * */
    public String getCreateby()
    {
        return createby;
    }
     /**
     *   Setter CREATE_BY        * */
    public void setCreateby(String _createby) {
		if (!changedValues.containsKey(columnCreateby())) {
			changedValues.put(columnCreateby(), this.createby);
		}
        this.createby = _createby;
    }


     /**
     *   Getter CREATE_DATE , NOT NULL        * */
    public Date getCreatedate()
    {
        return createdate;
    }
     /**
     *   Setter CREATE_DATE , NOT NULL        * */
    public void setCreatedate(Date _createdate) {
		if (!changedValues.containsKey(columnCreatedate())) {
			changedValues.put(columnCreatedate(), this.createdate);
		}
        this.createdate = _createdate;
    }


     /**
     *   Getter UPDATE_BY        * */
    public String getUpdateby()
    {
        return updateby;
    }
     /**
     *   Setter UPDATE_BY        * */
    public void setUpdateby(String _updateby) {
		if (!changedValues.containsKey(columnUpdateby())) {
			changedValues.put(columnUpdateby(), this.updateby);
		}
        this.updateby = _updateby;
    }


     /**
     *   Getter UPDATE_DATE        * */
    public Date getUpdatedate()
    {
        return updatedate;
    }
     /**
     *   Setter UPDATE_DATE        * */
    public void setUpdatedate(Date _updatedate) {
		if (!changedValues.containsKey(columnUpdatedate())) {
			changedValues.put(columnUpdatedate(), this.updatedate);
		}
        this.updatedate = _updatedate;
    }


     /**
     *   Getter VERSION        * */
    public BigDecimal getVersion()
    {
        return version;
    }
     /**
     *   Setter VERSION        * */
    public void setVersion(BigDecimal _version) {
		if (!changedValues.containsKey(columnVersion())) {
			changedValues.put(columnVersion(), this.version);
		}
        this.version = _version;
    }


     /**
     *   Getter PARENT_ID        * */
    public String getParentid()
    {
        return parentid;
    }
     /**
     *   Setter PARENT_ID        * */
    public void setParentid(String _parentid) {
		if (!changedValues.containsKey(columnParentid())) {
			changedValues.put(columnParentid(), this.parentid);
		}
        this.parentid = _parentid;
    }


     /**
     *   Getter LOOK_LEVEL        * */
    public BigDecimal getLooklevel()
    {
        return looklevel;
    }
     /**
     *   Setter LOOK_LEVEL        * */
    public void setLooklevel(BigDecimal _looklevel) {
		if (!changedValues.containsKey(columnLooklevel())) {
			changedValues.put(columnLooklevel(), this.looklevel);
		}
        this.looklevel = _looklevel;
    }




/******************************************************
*
*  Get Column Name
*
*******************************************************/
    /**
    *   Getter ID , NOT NULL       * */
    public static String  columnId()
    {
        return "ID";
    }
   
    /**
    *   Getter CODE , NOT NULL       * */
    public static String  columnCode()
    {
        return "CODE";
    }
   
    /**
    *   Getter DISPLAYVALUE       * */
    public static String  columnDisplayvalue()
    {
        return "DISPLAYVALUE";
    }
   
    /**
    *   Getter LOOKUPLIST_ID       * */
    public static String  columnLookuplistid()
    {
        return "LOOKUPLIST_ID";
    }
   
    /**
    *   Getter SORT       * */
    public static String  columnSort()
    {
        return "SORT";
    }
   
    /**
    *   Getter CREATE_BY       * */
    public static String  columnCreateby()
    {
        return "CREATE_BY";
    }
   
    /**
    *   Getter CREATE_DATE , NOT NULL       * */
    public static String  columnCreatedate()
    {
        return "CREATE_DATE";
    }
   
    /**
    *   Getter UPDATE_BY       * */
    public static String  columnUpdateby()
    {
        return "UPDATE_BY";
    }
   
    /**
    *   Getter UPDATE_DATE       * */
    public static String  columnUpdatedate()
    {
        return "UPDATE_DATE";
    }
   
    /**
    *   Getter VERSION       * */
    public static String  columnVersion()
    {
        return "VERSION";
    }
   
    /**
    *   Getter PARENT_ID       * */
    public static String  columnParentid()
    {
        return "PARENT_ID";
    }
   
    /**
    *   Getter LOOK_LEVEL       * */
    public static String  columnLooklevel()
    {
        return "LOOK_LEVEL";
    }
   


    /**
    *  Table Name
    */
    public static String tableName(){
        return "SYS_LOOKUPVALUE";
    }
    
    /**
    *  Columns
    */
    public static String[] columnNames(){
        String[] columnNames = new String[12];        
        columnNames[0]="ID";
        columnNames[1]="CODE";
        columnNames[2]="DISPLAYVALUE";
        columnNames[3]="LOOKUPLIST_ID";
        columnNames[4]="SORT";
        columnNames[5]="CREATE_BY";
        columnNames[6]="CREATE_DATE";
        columnNames[7]="UPDATE_BY";
        columnNames[8]="UPDATE_DATE";
        columnNames[9]="VERSION";
        columnNames[10]="PARENT_ID";
        columnNames[11]="LOOK_LEVEL";
        return columnNames;     
    }
    
    /**
     * Encrypt Columns
     */
    public String[] getEncryptColumnNames(){
    	String[] columnNames = new String[0];
        return columnNames;
    }
/*******************************************************
*
*  supplementary methods
*
*****************************************************/


    /* Indicates whether some other object is "equal to" this one. */
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;

        if (obj == null || !(obj instanceof SysLookupvalueDto))
            return false;

        SysLookupvalueDto bean = (SysLookupvalueDto) obj;


      //compare field id
      if((this.id==null && bean.id!=null) || (this.id!=null && bean.id==null))
          return false;
      else if(this.id!=null && bean.id!=null&&!bean.id.equals(this.id))
          return false;
          
      //compare field code
      if((this.code==null && bean.code!=null) || (this.code!=null && bean.code==null))
          return false;
      else if(this.code!=null && bean.code!=null&&!bean.code.equals(this.code))
          return false;
          
      //compare field displayvalue
      if((this.displayvalue==null && bean.displayvalue!=null) || (this.displayvalue!=null && bean.displayvalue==null))
          return false;
      else if(this.displayvalue!=null && bean.displayvalue!=null&&!bean.displayvalue.equals(this.displayvalue))
          return false;
          
      //compare field lookuplistid
      if((this.lookuplistid==null && bean.lookuplistid!=null) || (this.lookuplistid!=null && bean.lookuplistid==null))
          return false;
      else if(this.lookuplistid!=null && bean.lookuplistid!=null&&!bean.lookuplistid.equals(this.lookuplistid))
          return false;
          
      //compare field sort
      if((this.sort==null && bean.sort!=null) || (this.sort!=null && bean.sort==null))
          return false;
      else if(this.sort!=null && bean.sort!=null&&!bean.sort.equals(this.sort))
          return false;
          
      //compare field createby
      if((this.createby==null && bean.createby!=null) || (this.createby!=null && bean.createby==null))
          return false;
      else if(this.createby!=null && bean.createby!=null&&!bean.createby.equals(this.createby))
          return false;
          
      //compare field createdate
      if((this.createdate==null && bean.createdate!=null) || (this.createdate!=null && bean.createdate==null))
          return false;
      else if(this.createdate!=null && bean.createdate!=null&&!bean.createdate.equals(this.createdate))
          return false;
          
      //compare field updateby
      if((this.updateby==null && bean.updateby!=null) || (this.updateby!=null && bean.updateby==null))
          return false;
      else if(this.updateby!=null && bean.updateby!=null&&!bean.updateby.equals(this.updateby))
          return false;
          
      //compare field updatedate
      if((this.updatedate==null && bean.updatedate!=null) || (this.updatedate!=null && bean.updatedate==null))
          return false;
      else if(this.updatedate!=null && bean.updatedate!=null&&!bean.updatedate.equals(this.updatedate))
          return false;
          
      //compare field version
      if((this.version==null && bean.version!=null) || (this.version!=null && bean.version==null))
          return false;
      else if(this.version!=null && bean.version!=null&&!bean.version.equals(this.version))
          return false;
          
      //compare field parentid
      if((this.parentid==null && bean.parentid!=null) || (this.parentid!=null && bean.parentid==null))
          return false;
      else if(this.parentid!=null && bean.parentid!=null&&!bean.parentid.equals(this.parentid))
          return false;
          
      //compare field looklevel
      if((this.looklevel==null && bean.looklevel!=null) || (this.looklevel!=null && bean.looklevel==null))
          return false;
      else if(this.looklevel!=null && bean.looklevel!=null&&!bean.looklevel.equals(this.looklevel))
          return false;
          



        return true;
    }

    /* return hashCode ,if A.equals(B) that A.hashCode()==B.hashCode() */
	public int hashCode()
	{
  
		int _hash_ = 1;
		
        if(this.id!=null)
          _hash_ = _hash_ * 31+ this.id.hashCode() ;
        if(this.code!=null)
          _hash_ = _hash_ * 31+ this.code.hashCode() ;
        if(this.displayvalue!=null)
          _hash_ = _hash_ * 31+ this.displayvalue.hashCode() ;
        if(this.lookuplistid!=null)
          _hash_ = _hash_ * 31+ this.lookuplistid.hashCode() ;
        if(this.sort!=null)
          _hash_ = _hash_ * 31+ this.sort.hashCode() ;
        if(this.createby!=null)
          _hash_ = _hash_ * 31+ this.createby.hashCode() ;
        if(this.createdate!=null)
          _hash_ = _hash_ * 31+ this.createdate.hashCode() ;
        if(this.updateby!=null)
          _hash_ = _hash_ * 31+ this.updateby.hashCode() ;
        if(this.updatedate!=null)
          _hash_ = _hash_ * 31+ this.updatedate.hashCode() ;
        if(this.version!=null)
          _hash_ = _hash_ * 31+ this.version.hashCode() ;
        if(this.parentid!=null)
          _hash_ = _hash_ * 31+ this.parentid.hashCode() ;
        if(this.looklevel!=null)
          _hash_ = _hash_ * 31+ this.looklevel.hashCode() ;

		return _hash_;
	
	}

     /* Creates and returns a copy of this object. */
    public Object clone()
    {
        SysLookupvalueDto bean = new SysLookupvalueDto();

          if (this.id != null)
            bean.id = String.valueOf(this.id);
          if (this.code != null)
            bean.code = String.valueOf(this.code);
          if (this.displayvalue != null)
            bean.displayvalue = String.valueOf(this.displayvalue);
          if (this.lookuplistid != null)
            bean.lookuplistid = String.valueOf(this.lookuplistid);
          if (this.sort != null)
            bean.sort = new BigDecimal(this.sort.toString());
          if (this.createby != null)
            bean.createby = String.valueOf(this.createby);
          if (this.createdate != null)
            bean.createdate = (Date) this.createdate.clone();
          if (this.updateby != null)
            bean.updateby = String.valueOf(this.updateby);
          if (this.updatedate != null)
            bean.updatedate = (Date) this.updatedate.clone();
          if (this.version != null)
            bean.version = new BigDecimal(this.version.toString());
          if (this.parentid != null)
            bean.parentid = String.valueOf(this.parentid);
          if (this.looklevel != null)
            bean.looklevel = new BigDecimal(this.looklevel.toString());
  
        return bean;
    }


   /* Returns a string representation of the object. */
    public String toString()
    {
        String sep = "; ";
        StringBuffer sb = new StringBuffer();
        sb.append("SysLookupvalueDto").append(sep);
        sb.append("[id]").append(" = ").append(id).append(sep);
        sb.append("[code]").append(" = ").append(code).append(sep);
        sb.append("[displayvalue]").append(" = ").append(displayvalue).append(sep);
        sb.append("[lookuplistid]").append(" = ").append(lookuplistid).append(sep);
        sb.append("[sort]").append(" = ").append(sort).append(sep);
        sb.append("[createby]").append(" = ").append(createby).append(sep);
        sb.append("[createdate]").append(" = ").append(createdate).append(sep);
        sb.append("[updateby]").append(" = ").append(updateby).append(sep);
        sb.append("[updatedate]").append(" = ").append(updatedate).append(sep);
        sb.append("[version]").append(" = ").append(version).append(sep);
        sb.append("[parentid]").append(" = ").append(parentid).append(sep);
        sb.append("[looklevel]").append(" = ").append(looklevel).append(sep);
            return sb.toString();
    }

  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid()
  {
  	StringBuffer sb = new StringBuffer() ;

    //check field ID
      if (this.getId()==null)
             sb.append("ID不能为空; ");
      if (this.getId()!=null)
             if (this.getId().getBytes().length > 50)
                sb.append("ID宽度不能超过 "+50+"个字符;  ");
    
    //check field CODE
      if (this.getCode()==null)
             sb.append("CODE不能为空; ");
      if (this.getCode()!=null)
             if (this.getCode().getBytes().length > 50)
                sb.append("CODE宽度不能超过 "+50+"个字符;  ");
    
    //check field DISPLAYVALUE
      if (this.getDisplayvalue()!=null)
             if (this.getDisplayvalue().getBytes().length > 100)
                sb.append("DISPLAYVALUE宽度不能超过 "+100+"个字符;  ");
    
    //check field LOOKUPLIST_ID
      if (this.getLookuplistid()!=null)
             if (this.getLookuplistid().getBytes().length > 50)
                sb.append("LOOKUPLIST_ID宽度不能超过 "+50+"个字符;  ");
    
    //check field SORT
      
    //check field CREATE_BY
      if (this.getCreateby()!=null)
             if (this.getCreateby().getBytes().length > 50)
                sb.append("CREATE_BY宽度不能超过 "+50+"个字符;  ");
    
    //check field CREATE_DATE
      if (this.getCreatedate()==null)
             sb.append("CREATE_DATE不能为空; ");
      
    //check field UPDATE_BY
      if (this.getUpdateby()!=null)
             if (this.getUpdateby().getBytes().length > 50)
                sb.append("UPDATE_BY宽度不能超过 "+50+"个字符;  ");
    
    //check field UPDATE_DATE
      
    //check field VERSION
      
    //check field PARENT_ID
      if (this.getParentid()!=null)
             if (this.getParentid().getBytes().length > 50)
                sb.append("PARENT_ID宽度不能超过 "+50+"个字符;  ");
    
    //check field LOOK_LEVEL
      

 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid(String[] _columnNames)
  {
  	StringBuffer sb = new StringBuffer() ;
    // check columnNames
    String checkNameMsg = checkColumnNamesValid(_columnNames);
    if (checkNameMsg != null) {
         return checkNameMsg;
    }
    //check field ID
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("ID")) {
               if (this.getId()==null)
                    sb.append("ID 不能为空;  ");
               if (this.getId()!=null)
                    if (this.getId().getBytes().length > 50)
                        sb.append("ID 宽度不能超过 "+50+"个字符; ");
             break;
         }
  }
    
    //check field CODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("CODE")) {
               if (this.getCode()==null)
                    sb.append("CODE 不能为空;  ");
               if (this.getCode()!=null)
                    if (this.getCode().getBytes().length > 50)
                        sb.append("CODE 宽度不能超过 "+50+"个字符; ");
             break;
         }
  }
    
    //check field DISPLAYVALUE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("DISPLAYVALUE")) {
                 if (this.getDisplayvalue()!=null)
                    if (this.getDisplayvalue().getBytes().length > 100)
                        sb.append("DISPLAYVALUE 宽度不能超过 "+100+"个字符; ");
             break;
         }
  }
    
    //check field LOOKUPLIST_ID
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("LOOKUPLIST_ID")) {
                 if (this.getLookuplistid()!=null)
                    if (this.getLookuplistid().getBytes().length > 50)
                        sb.append("LOOKUPLIST_ID 宽度不能超过 "+50+"个字符; ");
             break;
         }
  }
    
    //check field SORT
          
    //check field CREATE_BY
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("CREATE_BY")) {
                 if (this.getCreateby()!=null)
                    if (this.getCreateby().getBytes().length > 50)
                        sb.append("CREATE_BY 宽度不能超过 "+50+"个字符; ");
             break;
         }
  }
    
    //check field CREATE_DATE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("CREATE_DATE")) {
               if (this.getCreatedate()==null)
                    sb.append("CREATE_DATE 不能为空;  ");
               break;
         }
  }
    
    //check field UPDATE_BY
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("UPDATE_BY")) {
                 if (this.getUpdateby()!=null)
                    if (this.getUpdateby().getBytes().length > 50)
                        sb.append("UPDATE_BY 宽度不能超过 "+50+"个字符; ");
             break;
         }
  }
    
    //check field UPDATE_DATE
          
    //check field VERSION
          
    //check field PARENT_ID
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("PARENT_ID")) {
                 if (this.getParentid()!=null)
                    if (this.getParentid().getBytes().length > 50)
                        sb.append("PARENT_ID 宽度不能超过 "+50+"个字符; ");
             break;
         }
  }
    
    //check field LOOK_LEVEL
          
 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
	public String checkValidExcept(String[] _columnNames) {
		String msg = checkColumnNamesValid(_columnNames);
		if (msg != null) {
			return msg;
		}
		String[] columnCheckNames = new String[columnNames().length
				- _columnNames.length];
		int k = 0;
		for (int i = 0; i < columnNames().length; i++) {
			boolean checkNameInColumn = true;
			for (int j = 0; j < _columnNames.length; j++) {
				if (_columnNames[j].equals(columnNames()[i])) {
					checkNameInColumn = false;
					break;
				}
			}
			if (checkNameInColumn) {
				columnCheckNames[k] = columnNames()[i];
				k++;
			}
		}
		return checkValid(columnCheckNames);
	}
	/* Returns value valid checking String , NULL is Valid */
	public String checkColumnNamesValid(String[] _columnNames) {
		StringBuffer sb = new StringBuffer();
		if (_columnNames.length > columnNames().length) {
			return "输入字段个数多于表中字段个数;  ";
		}
		// check columnNames
		for (int i = 0; i < _columnNames.length; i++) {
			boolean checkNameValid = false;
			for (int j = 0; j < columnNames().length; j++) {
				if (_columnNames[i] != null
						&& _columnNames[i].equals(columnNames()[j])) {
					checkNameValid = true;
					break;
				}
			}
			if (!checkNameValid)
				sb.append("输入字段  " + _columnNames[i] + "  不在该表字段中;  ");
		}
		String msg = sb.toString();
		if (msg.length() == 0)
			return null;

		return msg;
	}
/*******************************************************
*
*  implement IDto
*
*****************************************************/

  /* if this Dto has children Dtos*/
  public boolean  isParent() {
     return false;
  };

  
    
	/**
	 * 更改其是否被修改的属性，将其true更改为false
	 */
	public void clearChangedFlag() {
		changedValues.clear();
	}

	/**
	 * 获得被修改的列
	 * 
	 * @return
	 */
	public List getChangedFields() {
		List changedFields = new ArrayList();
		Set keySet = changedValues.keySet();
		for (Object object : keySet) {
			changedFields.add(object);
		}
		return changedFields;
	}

	/**
	 * 通过列名获得其某个列的被修改前的属性值，若其未被修改则返回null
	 * 
	 * @param fieldName
	 * @return
	 */
	public Object getOldValue(String fieldName) {
		if (changedValues.containsKey(fieldName))
			return changedValues.get(fieldName);
		return null;
	}

	/**
	 * 标记当前dto数值是否被修改过
	 * 
	 * @return
	 */
	public boolean isChanged() {
		return !changedValues.isEmpty();
	}

	/**
	 * 将dto新修改的值恢复成原始值
	 */
	public void restoreChangedValule() {
		Set keySet = changedValues.keySet();
		for (Object object : keySet) {
			String key = (String) object;
			Object value = changedValues.get(key);
			if (columnId().equals(key)) {
				setId((String)value);
			}
			else if (columnCode().equals(key)) {
				setCode((String)value);
			}
			else if (columnDisplayvalue().equals(key)) {
				setDisplayvalue((String)value);
			}
			else if (columnLookuplistid().equals(key)) {
				setLookuplistid((String)value);
			}
			else if (columnSort().equals(key)) {
				setSort((BigDecimal)value);
			}
			else if (columnCreateby().equals(key)) {
				setCreateby((String)value);
			}
			else if (columnCreatedate().equals(key)) {
				setCreatedate((Date)value);
			}
			else if (columnUpdateby().equals(key)) {
				setUpdateby((String)value);
			}
			else if (columnUpdatedate().equals(key)) {
				setUpdatedate((Date)value);
			}
			else if (columnVersion().equals(key)) {
				setVersion((BigDecimal)value);
			}
			else if (columnParentid().equals(key)) {
				setParentid((String)value);
			}
			else if (columnLooklevel().equals(key)) {
				setLooklevel((BigDecimal)value);
			}
		}
		changedValues.clear();
	}
}

