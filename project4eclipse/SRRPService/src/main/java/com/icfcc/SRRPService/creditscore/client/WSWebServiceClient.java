package com.icfcc.SRRPService.creditscore.client;

import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import javax.xml.namespace.QName;

import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import com.icfcc.SRRPDao.jpa.entity.companyInfo.CapCompanyInfoVo;
import com.icfcc.ssrp.util.AESUtil;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

/**
 * This class was generated by Apache CXF 2.7.12
 * 2017-10-30T15:23:57.477+08:00
 * Generated source version: 2.7.12
 * 
 */
@Service
public final class WSWebServiceClient {

    private static final QName SERVICE_NAME = new QName("http://creditscore.ws.cap.cfcc.com/", "WSWebService");
    
   
   //可配置的webservice 路径
   	@Value("${scoreURL}")
   	public String scoreURL;
   	//评分卡类型 
   	@Value("${source}")
   	public  String source;
   	//加密的秘钥
   	@Value("${scoreKey}")
   	public  String key;
	@Value("${usercode}")
   	public  String usercode;
	
	/**
	 * 
	 * @param userName
	 * @param params
	 * @param pageSize
	 * @param pageNum
	 * @param sourceSys
	 * @return
	 */
	public String  getCorpInfos(String params,String pageSize,String pageNum){
		//System.out.println(params);
		StringBuffer scoreInfos=new StringBuffer();
		String usernameSys =  AESUtil.encryptSecs(usercode,key);//用户名
		String paramsSys =  AESUtil.encryptSecs(params,key);//筛选条件
		String pageSizeSys =  AESUtil.encryptSecs(pageSize,key);//每页记录数
		String pageNumSys =  AESUtil.encryptSecs(pageNum,key);//查询第几页
		String sourceSysSys =  AESUtil.encryptSecs(source,key);//系统来源
		try {
			URL url= new URL(scoreURL);
			 WSWebService_Service ss = new WSWebService_Service(url, SERVICE_NAME);
		     WSWebService port = ss.getWSWebServiceImplPort();  
		     StringBuffer result =new StringBuffer();
		     result.append(port.getCorpInfos(usernameSys, paramsSys, pageSizeSys, pageNumSys, sourceSysSys));
		        
		     if(null != result.toString()){
		    	//返回类型  有一下俩种结果
		    	//String backStr =  AESUtil.decryptSecs(result.toString(),key);
//			    System.out.println("backStr========================="+backStr);
//		    	String[] scorelist=AESUtil.decryptSecs(result.toString(),key).split("\\|");
		    	if("1".equals(AESUtil.decryptSecs(result.toString(),key).split("\\|")[0])){
		    		scoreInfos.append(AESUtil.decryptSecs(result.toString(),key).split("\\|")[1]) ;
		    	}
		    	 //System.out.println("webservice查询出来的评分结果=="+scoreInfos);
		     }
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return scoreInfos.toString();
	}
    
	 /**
     * 调用webservice 评分状态方法
     * 用来判断当月评分是否计算完
     * @return
     * @throws MalformedURLException 
     */
	public boolean  getStatus() throws MalformedURLException{
		boolean scoreInfo = false;
			//查询评分的评分卡编码
			String scoreCard =  AESUtil.encryptSecs("990001001",key);
			String timeId = null;
			Calendar cal = Calendar.getInstance();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMM");
			timeId = sdf.format(cal.getTime());
			//查询当月评分是否完成统计的月份
			String data = AESUtil.encryptSecs(timeId,key);
        	 URL url =  new URL(scoreURL);
			 WSWebService_Service ss = new WSWebService_Service(url, SERVICE_NAME);
		     WSWebService port = ss.getWSWebServiceImplPort();  
		     //查询评分状态 分为以下三种情况
		     //第一种情况 如果返回为后面的结果说明评分异常 （  0|接口查询参数为空    -1|查询异常 ） 
		     //第二种情况 如果返回后面结果，说明评分没有完成  1|[{"status":""}]    
		     //第三种请况 如果返回后面结果，说明评分完成  1|[{"status":"0"}]
		     String status= port.getStatus(scoreCard,  data);
		     if(null != status){
		    	 String rs =null;
		    	 try{
		    		 //解密
		    		 rs=AESUtil.decryptSecs(status,key);
		    	 }catch(Exception e){
		    		 e.printStackTrace();
		    	 }
		    	 String scores[] = rs.split("\\|");
		    	//只判断返回结果 为 1的状态
		    	 if("1".equals(scores[0])){
		    		JSONArray compScores =  JSONArray.fromObject(scores[1]);
	    			JSONObject scoreJson = (JSONObject) compScores.get(0);
	    			String s = (String) scoreJson.get("status");
				     System.out.println("返回状态==================="+s);
	    			//如果返回 status 为 0 那么就是可以进行 评分结果查询
		    		if("0".equals(s)){
		    				scoreInfo=true;
	    			}
		    	 }
		     }
		return scoreInfo;
		
	}

	/**
	 * 根据评分卡 企业统一社会信用码去查询
	 * @return
	 * @throws MalformedURLException 
	 */
	public String  getScoreInfos(String codes) throws MalformedURLException{
		String scoreInfos=null;
		//查询评分的用户名
		String username =  AESUtil.encryptSecs(usercode,key);
		//查询评分的企业 组织机构代码或者社会统一信用码 多个用  ,    隔开
		String creditcodes =  AESUtil.encryptSecs(codes,key);
		//评分需要参数 写死的值
		String sourceSys =  AESUtil.encryptSecs("SECS",key);
		//查询评分的评分卡编码
		String scoreCard =  AESUtil.encryptSecs("990001001",key);
	     /* 
	      * 查询评分详情 参数 
	      * @param username    评分要用到的用户 （新版给 null）
	      * @param scoreCard    评分卡编码
	      * @param creditcodes  统一社会信用码或者组织机构代码 多个用 , 隔开
	      * @param sourceSys    写死的股权平台 SRRP
	      */
	
			URL url= new URL(scoreURL);
			 WSWebService_Service ss = new WSWebService_Service(url, SERVICE_NAME);
		     WSWebService port = ss.getWSWebServiceImplPort();  
		     String result = "";
		     result = port.getScoreInfos(username,scoreCard, creditcodes,sourceSys);
		     if(null != result){
		    	//返回类型  有一下俩种结果
		    	String backStr =  AESUtil.decryptSecs(result,key);
		    	String []scorelist=backStr.split("\\|");
		    	if("1".equals(scorelist[0])){
		    		scoreInfos = scorelist[1];
		    	}
		    	 System.out.println("webservice查询出来的评分结果=="+scoreInfos);
		     }
		return scoreInfos;
	}
    
	public static void main(String[] args) {
//		String usernameAes = AESUtil.decryptSecs("Hdi2FEve3baT9ZmD/WnXCQ==", "123456qwerty1111");
//		String sourceSysAes = AESUtil.decryptSecs("oDtI7Uhmh+DpNZ/z28nL8Q====", "123456qwerty1111");
//		String pageNumAes = AESUtil.decryptSecs("AqQPBaQCkmks68Bz9DcY3Q==", "123456qwerty1111");
//		String pageSizeAes = AESUtil.decryptSecs("QS+4/R2ORaeUiZiesKrqFw==", "123456qwerty1111");
		String paramsAes = AESUtil.decryptSecs("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", "123456qwerty1111");
		Map map = new HashMap();
		Map<String, Object> booter = new HashMap();
		map = JSONObject.fromObject(paramsAes);
		try {
			CapCompanyInfoVo vo =new CapCompanyInfoVo();
			for (Object key : map.keySet()) {
				if (key.toString().length() >= 5
						&& "index".equals(key.toString().substring(
								0, 5))) {
					BeanUtils.setProperty(vo, key.toString(), map
							.get(key));
				}
			}
			// 为booter设置key-value
//			booter.put("userid", result[2]);
//			booter.put("departmentid", result[1]);
			booter.put("dto", vo);
			booter.put("scale", getStringArray(map.get("scale")));
			Object ss=map.get("register_type");
//			booter.put("region", getStringArray(map.get("region")));
			booter.put("register_type", getStringArray(map
					.get("register_type")));
			booter.put("investment_type", getStringArray(map
					.get("investment_type")));
			booter.put("yearnum",
					getStringArray(map.get("yearnum")));
			booter.put("industry", getStringArray(map
					.get("industry")));
			booter.put("lend", getStringArray(map.get("lend")));
			booter.put("auth", getStringArray(map.get("auth")));
			booter.put("loan_status", getStringArray(map
					.get("loan_status")));
			booter.put("hg_status", getStringArray(map
					.get("hg_status")));
			booter.put("aq_status", getStringArray(map
					.get("aq_status")));
			booter.put("nashui_status", getStringArray(map
					.get("nashui_status")));
			booter.put("hb_status", getStringArray(map
					.get("hb_status")));
			booter.put("rongyu_status", (map.get("rongyu_status")));
			booter.put("pffzstart", getStringArray(map
					.get("pffzstart")));
			booter.put("pffzend",
					getStringArray(map.get("pffzend")));
			booter.put("xyfdj", getStringArray(map.get("xyfdj")));
			booter.put("ss_status", getStringArray(map
					.get("ss_status")));
			booter.put("yhjr_status", getStringArray(map
					.get("yhjr_status")));
			booter.put("authFlagYes", map.get("authFlagYes"));
			booter.put("authFlagNo", map.get("authFlagNo"));
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	private static String[] getStringArray(Object ja) {
		if (ja!=null) {
			return (String[]) JSONArray.toArray((JSONArray) ja, String.class);
		}
		return null;
	}
}